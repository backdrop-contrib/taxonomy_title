<?php
/**
 * @file
 * Enhanced control over the heading tag for the taxonomy term list pages.
 */

/**
 * Implements hook_config_info().
 */
function taxonomy_title_config_info() {
  $prefixes['taxonomy_title.settings'] = array(
    'label' => t('Taxonomy title settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implementation of hook_menu().
 */
function taxonomy_title_menu(){
  $items['admin/config/search/taxonomy_title'] = array(
    'title' => 'Taxonomy title',
    'description' => 'Settings for the taxonomy title module.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('taxonomy_title_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'taxonomy_title.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function taxonomy_title_theme($existing, $type, $theme, $path) {
  $theme = array(
    'taxonomy_title_admin_settings' => array(
      'render element' => 'form',
      'file' => 'taxonomy_title.theme.inc',
    ),
  );

  return $theme;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function taxonomy_title_form_taxonomy_form_term_alter(&$form, &$form_state) {
  $title = taxonomy_title_get($form['#term']['tid']['#value'], FALSE);
  $alt = 'the term name';
  if ($global_default = config_get('taxonomy_title.settings', 'default_' . $form['#term']['vocabulary'])) {
    $alt = 'the global default pattern of <em>' . token_replace($global_default, array('term' => $form_state['term'])) . '</em>';
  }
  $form['taxonomy_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Term page heading'),
    '#default_value' => $title,
    '#description' => t('If left blank !alt will be used.', array('!alt' => $alt)),
  );
}

/**
 * Implements hook_preprocess_page().
 *
 * Sets the title tag.
 */
function taxonomy_title_preprocess_page(&$variables) {
  if (taxonomy_title_is_term_page()) {
    $tid = arg(2);
    $term = taxonomy_term_load($tid);

    // Get the settings.
    $page_title_settings = config_get('taxonomy_title.settings', 'page_titles');

    // If there's no setting, assume setting is ON.
    $affect_title = (is_null($page_title_settings) || !isset($page_title_settings[$term->vocabulary]) || $page_title_settings[$term->vocabulary] === $term->vocabulary);

    if ($affect_title && !module_exists('page_title') && !module_exists('metatag')) {

      // Retrieve the title based on tid.
      $title = taxonomy_title_get($tid);

      if (!empty($title)){
        $site_name = config_get('system.core', 'site_name');
        $head_title = array($title, $site_name);
        $variables['head_title'] = implode(' | ', $head_title);
      }
    }
  }
}

/**
 * Implements hook_preprocess_layout().
 *
 * Sets the heading tag.
 */
function taxonomy_title_preprocess_layout(&$variables) {
  if (taxonomy_title_is_term_page()) {
    $tid = arg(2);
    $term = taxonomy_term_load($tid);

    // Get the settings.
    $heading_settings = config_get('taxonomy_title.settings', 'headings');
    // If there's no setting, assume setting is ON.
    $affect_heading = (!isset($heading_settings[$term->vocabulary]) || $heading_settings[$term->vocabulary] === $term->vocabulary);

    if ($affect_heading) {
      $title = taxonomy_title_get($tid);
      if (!empty($title)){
        $variables['title'] = $title;
      }
    }
  }
}

/**
 * Helper function: determine if we are on a taxonomy/term page.
 *
 * @return (bool)
 *   TRUE if the page is a term page, FALSE if not.
 */
function taxonomy_title_is_term_page() {
  if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2)) && arg(2) > 0 && !arg(3)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function taxonomy_title_taxonomy_term_insert($term) {
  if (isset($term->taxonomy_title)) {
    taxonomy_title_insert($term->tid, $term->taxonomy_title);
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function taxonomy_title_taxonomy_term_update($term) {
  if (isset($term->taxonomy_title)) {
    taxonomy_title_update($term->tid, $term->taxonomy_title);
  }
  else {
    taxonomy_title_delete($term->tid);
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function taxonomy_title_taxonomy_term_delete($term) {
  taxonomy_title_delete($term->tid);
}

/******************************************************************************
 * CRUD functions
 ******************************************************************************/

/**
 * Retrieves the term title.
 *
 * @param (int) $tid
 *   The taxonomy term id of the term to delete.
 * @param (bool) $default
 *   Whether to return a global default value if no specific value is provided.
 *
 * @return (string)
 *   The taxonomy term title for the term.
 */
function taxonomy_title_get($tid, $default = TRUE) {
  $title = db_query("SELECT title FROM {taxonomy_title} WHERE tid = :tid", array(':tid' => $tid))->fetchField();
  if ($title == FALSE && $default == TRUE) {
    // Check for global default value.
    $term = taxonomy_term_load($tid);
    $default = config_get('taxonomy_title.settings', 'default_' . $term->vocabulary);
    $title = token_replace($default, array('term' => $term));

  }
  if (function_exists('i18n_string_translate')) {
    $title = i18n_string_translate(array('taxonomy_title', 'term', $tid, 'title'), $title, array('sanitize' => FALSE));
  }

  return $title;
}

/**
 * Inserts the term title.
 *
 * @param $tid
 *   The taxonomy term id of the term.
 * @param $title
 *   The taxonomy term title to use for this term.
 */
function taxonomy_title_insert($tid, $title = NULL) {
  if (!empty($title)) {
    $id = db_insert('taxonomy_title')
      ->fields(array(
        'tid' => $tid,
        'title' => $title,
      ))
      ->execute();
  }
}

/**
 * Updates the term title.
 *
 * @param $tid
 *   The taxonomy term id of the term.
 * @param $title
 *   The taxonomy term title to use for this term.
 */
function taxonomy_title_update($tid, $title) {
  db_merge('taxonomy_title')
    ->key(array(
      'tid'=>$tid
    ))
    ->fields(array(
      'title' => $title
    ))
    ->execute();

  // Add Suppot for i18nstrings.
  if (function_exists('i18n_string_update')) {
    i18n_string_update(array('taxonomy_title', 'term', $tid, 'title'), $title);
  }
}

/**
 * Deletes the term title.
 *
 * @param $tid
 *   The taxonomy term id of the term to delete.
 */
function taxonomy_title_delete($tid) {
  db_delete('taxonomy_title')
    ->condition('tid', $tid)
    ->execute();
}

/******************************************************************************
 * Support for translations
 ******************************************************************************/

/**
 * Implements hook_i18n_string_info()
 */
function taxonomy_title_i18n_string_info() {
  $groups['taxonomy_title'] = array(
    'title' => t('Taxonomy title'),
    'description' => t('Translatable custom page titles for taxonomy terms.'),
    'format' => FALSE, // This group doesn't have strings with format
    'list' => FALSE, // This group cannot list all strings
    'refresh callback' => 'taxonomy_title_locale_refresh',
  );
  return $groups;
}
